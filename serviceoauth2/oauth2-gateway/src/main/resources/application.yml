server:
  port: 3001
eureka:
  instance:
    healthCheckUrlPath: ${server.servlet.context-path}/actuator/health
    statusPageUrlPath: ${server.servlet.context-path}/actuator/info
    homePageUrl: ${server.servlet.context-path}/
    healthcheck:
      enabled: true
    hostname: 127.0.0.1
    prefer-ip-address: true
  client:
    service-url:
      defaultZone: http://${spring.security.user.name}:${spring.security.user.password}@${eureka.instance.hostname}:8001/eureka/
    enabled: true
spring:
  security:
    user:
      name: admin
      password: 123456
  zipkin:
    base-url: http://127.0.0.1:9411
    sleuth:
      sampler:
        percentage: 1.0
  cloud:
    gateway:
      #开启spring cloud gateway的路由功能
      enabled:  true
      loadbalancer:
        #负载均衡使用404
        use404: true
      #开启服务发现
      discovery:
        locator:
          enabled: true
          lower_case_service_id: true
          #开启基于注册中心的路由表。gateway可以通过开启以下配置来打开根据服务的serviceId来匹配路由,默认是大写:
          #如果需要小写serviceId,则配置
      routes:
        #访问地址
        #http://localhost:9871/mail
        - id: baidu
          uri: https://www.baidu.com
          predicates:
            - Path=/baidu

        #http://localhost:9871/spring-cloud
        - id: neo_route
          uri: http://www.ityouknow.com
          predicates:
            - Path=/spring-cloud

        #路由到注册中心的微服务模块
        #访问地址http://localhost:9871/api/gateway/route,当设置StripPrefix: 1时，默认过滤掉/api
        #则实际地址访问就变成了http://localhost:9871/gateway/route
        #测试熔断，集成熔断的功能
        - id: gateway-consume
          uri: lb://gateway-consume
          predicates:
            - Path=/api/**
          filters:
            - StripPrefix=1
            # 熔断降级配置
            - name: Hystrix
              args:
                name: default
                fallbackUri: 'forward:/fallback'

        #服务的限流功能，需要集成Redis的操作
        #则实际地址访问就变成了http://localhost:9876/gateway/redis
        - id: gateway-dubbo
          uri: lb://gateway-dubbo
          predicates:
            - Path=/redis/**
          filters:
            - StripPrefix=1
            - name: RequestRateLimiter
              args:
                #允许用户每秒处理多少个请求
                redis-rate-limiter.replenishRate: 1
                #令牌桶的容量，允许在一秒钟内完成的最大请求数
                redis-rate-limiter.burstCapacity: 3
                #使用 SpEL 按名称引用 bean，根据请求IP地址进行限制
                key-resolver: "#{@ipKeyResolver}"
                #predicates:
                  #- Method=GET
        #路由请求重试操作
  #redis的配置
  redis:
    host: localhost
    port: 6379
    password:
    timeout: 60000
  sleuth:
    redis:
      enabled: true
management:
  endpoints:
    web:
      exposure:
        include: "*"

#熔断器配置，设置默认的超时时间时3秒
hystrix:
  command:
    default:
      execution:
        isolation:
          strategy: SEMAPHORE
          thread:
            timeoutInMilliseconds: 3000
  shareSecurityContext: true